/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-03 16:43:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class FarmersProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title> Agro </title>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<style>\r\n");
      out.write("body{\r\n");
      out.write("background-image: url(\"img/itp2.png\");\r\n");
      out.write("}\r\n");
      out.write("h1{\r\n");
      out.write("           color: black;\r\n");
      out.write("           text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("         h2{\r\n");
      out.write("           color: black;\r\n");
      out.write("           text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        label{\r\n");
      out.write("             color:white;\r\n");
      out.write("             font-family: \"Times New Roman\", Times, serif;\r\n");
      out.write("             font-size: 25px;\r\n");
      out.write("             font-style: normal;\r\n");
      out.write("        }\r\n");
      out.write("        form{\r\n");
      out.write("            background:lightblue;\r\n");
      out.write("            width: 350px;\r\n");
      out.write("            color:white;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            margin-left: 500px;\r\n");
      out.write("            float: center;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("         .hh input[type=\"text\"]{\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            border:0;\r\n");
      out.write("            border-radius: 3px;\r\n");
      out.write("            padding:7px;\r\n");
      out.write("        }\r\n");
      out.write("        .hh input[type=\"password\"] {\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            padding:7px;\r\n");
      out.write("            border: 0;\r\n");
      out.write("            border-radius: 3px;\r\n");
      out.write("        }\r\n");
      out.write("        .hh input[type=\"submit\"]{\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            padding: 7px;\r\n");
      out.write("            border:0;\r\n");
      out.write("            border-radius: 3px;\r\n");
      out.write("            background-color: black;\r\n");
      out.write("            color:white;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-family: sans-serif;\r\n");
      out.write("            font-style: normal;\r\n");
      out.write("            outline:0;\r\n");
      out.write("        }\r\n");
      out.write("        .hh input[type=\"submit\"]:hover{\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        </style>\r\n");
      out.write("        <script> \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("        function isNumberKey(evt)\r\n");
      out.write("        {\r\n");
      out.write("           var charCode = (evt.which) ? evt.which : event.keyCode;\r\n");
      out.write("           if (charCode != 46 && charCode > 31 \r\n");
      out.write("             && (charCode < 48 || charCode > 57))\r\n");
      out.write("              return false;\r\n");
      out.write("\r\n");
      out.write("           return true;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("function onvalidate()\r\n");
      out.write("{ \r\n");
      out.write(" var fname = document.form.fname.value;\r\n");
      out.write(" var fproduct = document.form.fproduct.value; \r\n");
      out.write(" var amountOfSeeds = document.form.amountOfSeeds.value;\r\n");
      out.write(" var harvestTime = document.form.harvestTime.value;\r\n");
      out.write(" var harvestLand = document.form.harvestLand.value;\r\n");
      out.write(" \r\n");
      out.write(" if (fname==null || fname==\"\")\r\n");
      out.write(" { \r\n");
      out.write(" alert(\"Name can't be blank\"); \r\n");
      out.write(" return false; \r\n");
      out.write(" }\r\n");
      out.write(" else if (fproduct ==null || fproduct ==\"\")\r\n");
      out.write(" { \r\n");
      out.write(" alert(\"Products can't be blank\"); \r\n");
      out.write(" return false; \r\n");
      out.write(" }\r\n");
      out.write(" else if (amountOfSeeds ==null || amountOfSeeds==\"\")\r\n");
      out.write(" {\r\n");
      out.write(" alert(\"amountofseeds can't be blank\"); \r\n");
      out.write(" return false; \r\n");
      out.write(" } \r\n");
      out.write(" else if (harvestTime ==null || harvestTime ==\"\")\r\n");
      out.write(" {\r\n");
      out.write(" alert(\"harvesttime can't be blank\"); \r\n");
      out.write(" return false; \r\n");
      out.write(" }\r\n");
      out.write(" else if (harvestLand ==null || harvestLand ==\"\")\r\n");
      out.write(" {\r\n");
      out.write(" alert(\"harvestland can't be blank\"); \r\n");
      out.write(" return false; \r\n");
      out.write(" } \r\n");
      out.write(" } \r\n");
      out.write("</script> \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h1>Farmer's Product</h1>\r\n");
      out.write("<div class=\"hh\">\r\n");
      out.write("\r\n");
      out.write("<form action=\"HaariniFarmerAdd\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h2>Farmer's Product</h2>\r\n");
      out.write("<label>Enter the farmer's name:</label><br>\r\n");
      out.write(" <input type=\"text\" name=\"fname\" placeholder=\"Enter farmer's name...\" required><br> <br>\r\n");
      out.write("\r\n");
      out.write("<label>Enter the name of the product that the farmer produces:</label><br>\r\n");
      out.write(" <input type=\"text\" name=\"fproduct\" placeholder=\"Enter product name...\" required><br> <br>\r\n");
      out.write("\r\n");
      out.write("<label>Enter the amount of seeds:</label><br>\r\n");
      out.write("  <input type=\"text\" name=\"amountOfSeeds\" placeholder=\"Enter amount of seeds...\" onkeypress=\"return isNumberKey(event)\"  required> <br><br>\r\n");
      out.write("\r\n");
      out.write("<label>Enter the estimated harvest time of products (in months):</label><br>\r\n");
      out.write("  <input type=\"text\" name=\"harvestTime\" placeholder=\"Enter harvest time...\" onkeypress=\"return isNumberKey(event)\"  required><br> <br>\r\n");
      out.write("\r\n");
      out.write("<label>Enter the area of harvesting land (in acres): </label><br>\r\n");
      out.write("  <input type=\"text\" name=\"harvestLand\" placeholder=\"Enter harvest land...\" onkeypress=\"return isNumberKey(event)\"  required > <br><br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <input type=\"submit\" value=\"Submit\">\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
